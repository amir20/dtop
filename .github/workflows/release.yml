name: Release

on:
  push:
    tags:
      - "v*"
  pull_request:
    branches:
      - master

permissions:
  contents: write
  packages: write
  pages: write
  id-token: write

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.5"
          cache: true

      - name: Install UPX
        run: |
          sudo apt-get update
          sudo apt-get install -y upx-ucl

      - name: Run tests
        run: go test -v ./...

      - name: Run GoReleaser (Release)
        if: startsWith(github.ref, 'refs/tags/')
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run GoReleaser (Snapshot)
        if: github.event_name == 'pull_request'
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: latest
          args: release --snapshot --clean --skip publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Install aptly
        if: startsWith(github.ref, 'refs/tags/')
        run: sudo apt-get install -y aptly

      - name: Setup aptly and deploy repository
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          # Configure aptly
          mkdir -p ~/.aptly
          cat > ~/.aptly/aptly.conf << 'EOF'
          {
            "rootDir": "$HOME/.aptly",
            "downloadConcurrency": 4,
            "gpgDisableSign": true,
            "gpgDisableVerify": true,
            "FileSystemPublishEndpoints": {
              "public": {
                "rootDir": "./public",
                "linkMethod": "copy"
              }
            }
          }
          EOF

          # Create repository and add packages
          aptly repo create dtop
          find dist -name "*.deb" -exec aptly repo add dtop {} \;

          # Create snapshot and publish
          SNAPSHOT_NAME="dtop-$(date +%Y%m%d-%H%M%S)"
          aptly snapshot create $SNAPSHOT_NAME from repo dtop
          aptly publish snapshot $SNAPSHOT_NAME stable -component=main -distribution=stable

          # Copy install.sh from your repository
          cp scripts/install.sh public/install.sh  # Replace 'scripts/' with your actual directory

          # Create simple index page
          cat > public/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head><title>dtop - Debian Repository</title></head>
          <body>
              <h1>dtop - Debian Repository</h1>
              <h2>Installation Options</h2>
              <h3>Option 1: Install Script</h3>
              <pre>curl -fsSL https://amir20.github.io/dtop/install.sh | sh</pre>
              <h3>Option 2: APT Repository</h3>
              <pre>echo "deb https://amir20.github.io/dtop stable main" | sudo tee /etc/apt/sources.list.d/dtop.list
          sudo apt update
          sudo apt install dtop</pre>
              <p><a href="install.sh">Download install.sh</a> | <a href="https://github.com/amir20/dtop">GitHub Repository</a></p>
          </body>
          </html>
          EOF
      - name: Setup Pages
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/configure-pages@v4

      - name: Upload artifact
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

      - name: Deploy to GitHub Pages
        if: startsWith(github.ref, 'refs/tags/')
        id: deployment
        uses: actions/deploy-pages@v4
